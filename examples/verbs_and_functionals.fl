( (( [ 1 50 92 5 1 6949 1 3 2 6 952 21 614 ] )) -> $array$ )

dump^ # TODO: make built-in for perf reasons
    $a$ -> # top arg: array, write into new variable a
    $a @? $n$ -> # get length of a and write into new variable n
    
    -1 $i$ -> # write -1 into new variable i
    
    :loopend goto
    loopstart:
        a i @ # @ reads element i from array a and pushes it onto the stack
    loopend:
    $i n :loopstart inc_goto_until # inc i, go to loopstart if less than n
^^

dup^
    $x$ ->
    x x
^^

drop^
    $_$ ->
^^

dup_n^ # TODO: make built-in for perf reasons
    $n$ ->
    $x$ ->
    
    i$
    
    :loopend goto loopstart:
        x
    loopend: $i n :loopstart inc_goto_until
^^
swap^
    $a$ -> $b$ ->
    a b
^^
rot^
    $a$ -> $b$ -> $c$ ->
    b a c
^^
rrot^
    $a$ -> $b$ -> $c$ ->
    a c b
^^
flip^
    $a$ -> $b$ -> $c$ ->
    a b c
^^
over^
    $a$ -> $b$ ->
    a b a
^^
nip^
    $a$ -> $b$ ->
    a
^^

double^
    2 *
^^

cleave^ # TODO: make the "create N-length array from scalar" part a builtin
    # is cleave the name for this....?
    # [ 1 2 3 ] asdf
    # into
    # [ 1 2 3 ] [ asdf asdf asdf ]
    $x$ ->
    $a$ ->
    
    [ ] $b$ ->
    
    $a @? $n$ ->
    
    :loopend goto loopstart:
        $b $b @? x @+
    loopend: $a @? $b @? != :loopstart if_goto
    
    a b
^^

map^ # TODO: make built-in for perf reasons
    $f$ ->
    $a$ ->
    
    $a @? $n$ ->
    
    -1 $i$ ->
    
    [ :loopend goto loopstart:
        a i @ f call
    loopend: $i n :loopstart inc_goto_until ]
^^

array !print
[ array ^^dump ] !print
[ 5 ^^dup ] !print
[ 5 7 ^^dup_n ] !print
[ 1 2 3 ^^drop ] !print
[ 1 2 ^^swap ] !print

print^ !print ^^

"---" !printstr

[ 1 2 3 4 ] ^double ^^map !print
[ [ 1 2 3 4 ] ^print ^^map ]

[ 1 2 3 ^^rot ] !print

"verbs test complete" !printstr

bi^
    $f2$ ->
    $f1$ ->
    $a$ ->
    a f1 call a f2 call
^^

f^ 5 * !print ^^
g^ 1 + !print ^^

5 ^f ^g ^^bi


dip^
    $f$ ->
    $stash$ ->
    f call
    stash
^^

95123 5 ^f ^^dip !print

"currying/closure..." !printstr

inc_and_print^
    $n$ -> # bind top of stack (which we hope is a reference) to a var
    1 n += # increment the underlying value behind the reference
    n :: !print # print it (:: clones it first)
^^

make_fake_closure^
    $x$
    [ $x ^inc_and_print ]
^^

bound_call^
    ^^dump
    call
^^

^^make_fake_closure $curried$ ->

curried ^^bound_call
curried ^^bound_call
curried ^^bound_call
curried ^^bound_call
curried ^^bound_call

"verbs and functionals example done" !printstr
